{"version":3,"sources":["components/Helpers/Header/Header.module.scss","components/Check/EmptyCertificate/EmptyCertificate.module.scss","components/Check/ProgressCertificate/ProgressCertificate.module.scss","components/NoProvider/NoProvider.module.scss","components/NotFound/NotFound.module.scss","components/Check/Certificate/Certificate.module.scss","components/Helpers/Spinner/Spinner.module.scss","components/Landing/Landing.module.scss","instances/languages/constants.ts","instances/languages/functions.ts","instances/languages/redux.ts","instances/redux.ts","helpers/materialUI/theme.ts","instances/languages/hooks.ts","instances/stonentContract/constants.ts","instances/raribleContract/constants.ts","config.ts","instances/raribleContract/functions.ts","instances/stonentContract/functions.ts","components/Check/ProgressCertificate/intl.ts","components/Helpers/Header/intl.ts","components/Check/ProgressCertificate/ProgressCertificate.tsx","components/Helpers/Header/Languages/constants.ts","components/Helpers/Header/Languages/Languages.tsx","components/Helpers/Header/Header.tsx","components/Helpers/Spinner/Spinner.tsx","tools/functions/getYearAgo.ts","components/Check/Certificate/intl.ts","tools/functions/formatDateTime.ts","components/Check/EmptyCertificate/intl.ts","components/Check/Certificate/Certificate.tsx","components/Check/Certificate/constants.ts","components/Check/intl.ts","components/Check/EmptyCertificate/EmptyCertificate.tsx","components/Check/ErrorMessage/ErrorMessage.tsx","components/Check/SuccessMessage/SuccessMessage.tsx","components/Check/functions.ts","components/Landing/intl.ts","components/Check/Check.tsx","instances/raribleContract/hooks.ts","instances/iercContract/hooks.ts","instances/iercContract/constants.ts","instances/stonentContract/hooks.ts","components/NoProvider/intl.ts","components/Landing/Landing.tsx","components/NotFound/intl.ts","components/NoProvider/NoProvider.tsx","components/NotFound/NotFound.tsx","App.tsx","index.tsx","tools/redux/createStore.ts","components/Check/Check.module.scss"],"names":["module","exports","REDUX_ACTION","LS_CURRENT_LOCALE","LANGUAGES","locale","messages","getLSLocale","localStorage","getItem","setLSLocale","setItem","initState","find","language","reducer","combineReducers","languages","state","action","type","LANGUAGES_SET","createMuiTheme","palette","primary","main","grey","secondary","useLanguages","selector","reactReduxUseSelector","dispatch","reactReduxUseDispatch","setLanguage","ADDRESS","MODE","getImageUrl","imageIPFSURL","IPFSPathMatch","match","IPFSPath","getConfig","mode","DEV","TEST","PROD","BACKEND_URL","formatPrice","price","INTL_DATA","ProgressCertificate","intl","useIntl","className","styles","progressCertificate","Card","verdict","variant","Typography","formatMessage","id","PROGRESS","wait","WAIT","LANGUAGE_MENU_ID","Languages","useState","anchor","setAnchor","onClose","Button","color","aria-controls","aria-haspopup","onClick","e","currentTarget","Menu","anchorEl","keepMounted","open","map","MenuItem","Header","value","setValue","history","useHistory","onSearch","window","location","replace","AppBar","position","Toolbar","header","push","right","Input","input","onChange","target","onKeyPress","key","placeholder","PASTE_IDENTIFIER","endAdornment","searchIcon","Spinner","props","isPage","spinnerPage","CircularProgress","size","date","Date","isNaN","valueOf","hours","getHours","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear","Certificate","copyNotificationIsOpen","setCopyNotificationIsOpen","onCopy","text","copy","row","solid","title","DATE","formatDateTime","certificate","VERSION","version","TRANSACTION","transactionId","COPY","ORACLE","oracle","result","score","danderVerdict","succeedVerdict","SCORE","button","disabled","isFetching","onRunCheck","RECERTIFY","scoreBar","PLAGIARISM","ORIGINAL","bar","Snackbar","autoHideDuration","Alert","severity","COPIED","EmptyCertificate","emptyCertificate","NOT_CERTIFIED","certify","PRICE","certificationPrice","CERTIFY","ErrorMessage","isOpen","message","SuccessMessage","certificateHasBeenUpdated","first","second","Check","imageMetadata","setImageMetadata","imageCertificate","setImageCertificate","setIsFetching","errorMessage","setErrorMessage","successMessage","setSuccessMessage","setWeb3","raribleContract","setRaribleContract","getImageMetadataUrl","a","methods","uri","call","imageMetadataURI","test","getImageMetadata","metadataURL","fetch","res","status","json","data","name","description","image","externalUrl","external_url","attributes","console","log","useEffect","provider","config","web3","currentProvider","enable","Web3","contract","eth","Contract","abi","useRaribleContract","iercContract","setIercContract","approveMoneyUsage","getAccounts","accounts","defaultAccount","approve","STONET_ADDRESS","send","from","checkAccessMoneyUsage","allowance","useIercContract","stonentContract","setStonentContract","setCertificationPrice","getCertificate","imageId","lastCertification","certificates","parsedDate","parseInt","ID","Score","Oracle","Version","checkImage","check","getPrice","parsedPrice","formattedPrice","subscribeToCertificateSent","cb","events","RequestSended","fromBlock","error","subscribeToCertified","RequestCertified","useStonentContract","runCheckImage","ERROR_PAYMENT","params","ERROR_ABORTED","metadataUrl","metadata","newCertificate","SUCCESS_UPDATED","Container","imagePart","src","undefined","alt","info","top","MARKETPLACE","Landing","searchValue","setSearchValue","landing","content","TITLE","search","TextField","searchInput","label","InputProps","supportedCollections","SUPPORTED_PLATFORMS","link","testAlert","TEST_FIRST","TEST_SECOND","TEST_THIRD","NoProvider","container","noProvider","NO_PROVIDER","mainPage","MAIN_PAGE","NotFound","notFound","NOT_FOUND","App","theme","exact","path","component","ReactDOM","render","StrictMode","store","createBrowserHistory","routerMiddleware","createStore","document","getElementById"],"mappings":"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","file":"static/js/main.6fdf3dc4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__F7jL3\",\"right\":\"Header_right__3r7cY\",\"input\":\"Header_input__2A0vN\",\"searchIcon\":\"Header_searchIcon__1qmoY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emptyCertificate\":\"EmptyCertificate_emptyCertificate__fWp9M\",\"verdict\":\"EmptyCertificate_verdict__3vFYT\",\"certify\":\"EmptyCertificate_certify__2ctZG\",\"button\":\"EmptyCertificate_button__172SY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progressCertificate\":\"ProgressCertificate_progressCertificate__cheiS\",\"verdict\":\"ProgressCertificate_verdict__2zlZH\",\"wait\":\"ProgressCertificate_wait__1wKtf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NoProvider_container__2KAM1\",\"noProvider\":\"NoProvider_noProvider__LwepW\",\"mainPage\":\"NoProvider_mainPage__3FwPV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NotFound_container__27KvF\",\"notFound\":\"NotFound_notFound__1BrdI\",\"mainPage\":\"NotFound_mainPage__ezst7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Certificate_row__3OZq7\",\"text\":\"Certificate_text__1F_Pk\",\"title\":\"Certificate_title__2nQVy\",\"solid\":\"Certificate_solid__dULND\",\"result\":\"Certificate_result__nhQG_\",\"verdict\":\"Certificate_verdict__13wNP\",\"succeedVerdict\":\"Certificate_succeedVerdict__1DVIN\",\"danderVerdict\":\"Certificate_danderVerdict__3Aesx\",\"scoreBar\":\"Certificate_scoreBar__3D-7e\",\"bar\":\"Certificate_bar__1YbO3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinnerPage\":\"Spinner_spinnerPage__3MhJS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"landing\":\"Landing_landing__16RJt\",\"content\":\"Landing_content__3huHf\",\"title\":\"Landing_title__v6SZI\",\"searchContainer\":\"Landing_searchContainer__bGbqZ\",\"search\":\"Landing_search__oQpat\",\"searchInput\":\"Landing_searchInput__1bVBW\",\"searchIcon\":\"Landing_searchIcon__lgTpb\",\"supportedCollections\":\"Landing_supportedCollections__7phR1\",\"link\":\"Landing_link__3nahw\",\"testAlert\":\"Landing_testAlert__23sDO\"};","import {ILanguage} from './types';\r\n\r\n\r\nexport const LS_CURRENT_LOCALE = 'LS_CURRENT_LOCALE';\r\n\r\nexport enum REDUX_ACTION {\r\n    LANGUAGES_SET = 'LANGUAGES_SET',\r\n}\r\n\r\nexport const DEFAULT_LOCALE = 'EN';\r\n\r\nexport const LANGUAGES: ILanguage[] = [\r\n    {\r\n        locale: 'EN',\r\n        messages: {\r\n            'landing/title': 'Check NFT picture uniqueness',\r\n            'landing/paste-identifier': 'Past identifier here',\r\n            'landing/supported-platforms': 'Supported collections',\r\n            'landing/test-first': 'This is the demo project',\r\n            'landing/test-second': 'Please, connect to the Rinkeby',\r\n            'landing/test-third': 'test network before using',\r\n            'check/marketplace': 'Go to the marketplace',\r\n            'check/error-payment': 'Payment approvement is required',\r\n            'check/error-aborted': 'Operation has been aborted',\r\n            'check/success-updated': 'Certificate has been updated',\r\n            'check/empty-certificate/not-certified': 'Not certified',\r\n            'check/empty-certificate/price': 'Price',\r\n            'check/empty-certificate/certify': 'Certify',\r\n            'check/progress-certificate/progress': 'Certification in progress',\r\n            'check/progress-certificate/wait': 'Please, wait',\r\n            'check/certificate/date': 'Certification date',\r\n            'check/certificate/version': 'Certificate version',\r\n            'check/certificate/transaction': 'Transaction id',\r\n            'check/certificate/oracle': 'Certification oracle',\r\n            'check/certificate/copy': 'Copy',\r\n            'check/certificate/score': 'Score',\r\n            'check/certificate/recertify': 'Recertify',\r\n            'check/certificate/plagiarism': 'Plagiarism',\r\n            'check/certificate/original': 'Original',\r\n            'check/certificate/copied': 'Copied',\r\n            'not-found/not-found': 'Picture not found',\r\n            'not-found/main-page': 'Go to the main page',\r\n            'no-provider/no-provider': 'Для работы необходим ethereum-провайдер',\r\n        },\r\n    },\r\n    {\r\n        locale: 'RU',\r\n        messages: {\r\n            'landing/title': 'Проверьте уникальность NFT картины',\r\n            'landing/paste-identifier': 'Укажите идентификатор',\r\n            'landing/supported-platforms': 'Поддерживаемая коллекция',\r\n            'landing/test-first': 'Это демонтрационный проект',\r\n            'landing/test-second': 'Пожалуйста, подключитесь к тестовой',\r\n            'landing/test-third': 'сети Rinkeby перед использованием',\r\n            'check/marketplace': 'Отправиться в магазин',\r\n            'check/error-payment': 'Обязательно разрешение платежей',\r\n            'check/error-aborted': 'Операция прервана',\r\n            'check/success-updated': 'Сертификат был обновлён',\r\n            'check/empty-certificate/not-certified': 'Нет сертификата',\r\n            'check/empty-certificate/price': 'Цена',\r\n            'check/empty-certificate/certify': 'Сертифицировать',\r\n            'check/progress-certificate/progress': 'Выполняется сертификация',\r\n            'check/progress-certificate/wait': 'Пожалуйста, подождите',\r\n            'check/certificate/date': 'Дата сертификации',\r\n            'check/certificate/version': 'Версия сертификата',\r\n            'check/certificate/transaction': 'Id транзакции',\r\n            'check/certificate/oracle': 'Оракул сертификации',\r\n            'check/certificate/copy': 'Скопировать',\r\n            'check/certificate/score': 'Рейтинг',\r\n            'check/certificate/recertify': 'Обновить сертификат',\r\n            'check/certificate/plagiarism': 'Плагиат',\r\n            'check/certificate/original': 'Оригинальность',\r\n            'check/certificate/copied': 'Скопировано',\r\n            'not-found/not-found': 'Картина не найдена',\r\n            'not-found/main-page': 'На главную',\r\n            'no-provider/no-provider': 'Для работы необходим ethereum-провайдер',\r\n        },\r\n    },\r\n];\r\n","import {DEFAULT_LOCALE, LS_CURRENT_LOCALE} from './constants';\r\n\r\n\r\nexport function getLSLocale() {\r\n    return localStorage.getItem(LS_CURRENT_LOCALE) || DEFAULT_LOCALE;\r\n}\r\n\r\nexport function setLSLocale(locale: string) {\r\n    localStorage.setItem(LS_CURRENT_LOCALE, locale);\r\n}\r\n","import {IState} from './types/redux';\r\nimport {IReduxAction} from 'instances/types';\r\n\r\nimport {LANGUAGES, REDUX_ACTION} from './constants';\r\nimport {getLSLocale, setLSLocale} from './functions';\r\n\r\n\r\nconst initState: IState = {\r\n    locale: getLSLocale(),\r\n    messages: LANGUAGES.find((language) => language.locale === getLSLocale())?.messages,\r\n};\r\n\r\nexport default function(state: IState = initState, action: IReduxAction) {\r\n    switch (action.type) {\r\n        case REDUX_ACTION.LANGUAGES_SET: {\r\n            const {locale, messages} = action;\r\n\r\n            setLSLocale(locale);\r\n\r\n            return {\r\n                ...state,\r\n                locale,\r\n                messages,\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n","import {IReduxAction, IReduxState} from './types';\r\n\r\nimport {useDispatch as reactReduxUseDispatch, useSelector as reactReduxUseSelector} from 'react-redux';\r\nimport {combineReducers, Dispatch} from 'redux';\r\n\r\nimport languages from './languages/redux';\r\n\r\n\r\nexport const reducer = combineReducers<IReduxState, IReduxAction>({\r\n    languages,\r\n});\r\n\r\nexport const useDispatch = () => reactReduxUseDispatch<Dispatch<IReduxAction>>();\r\nexport const useSelector = <IResult>(selector: (state: IReduxState) => IResult) => reactReduxUseSelector<IReduxState, IResult>(selector);\r\n","import grey from '@material-ui/core/colors/grey';\r\nimport {createMuiTheme} from '@material-ui/core/styles';\r\n\r\n\r\nexport default createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: grey[900],\r\n        },\r\n        secondary: {\r\n            main: grey[900],\r\n        },\r\n    },\r\n});\r\n","import {ISetAction} from './types/redux';\r\n\r\nimport {useDispatch, useSelector} from 'instances/redux';\r\n\r\nimport {LANGUAGES, REDUX_ACTION} from './constants';\r\n\r\n\r\nexport function useLanguages() {\r\n    const language = useSelector((state) => state.languages);\r\n    const dispatch = useDispatch();\r\n\r\n    const setLanguage = (locale: string) => {\r\n        const language = LANGUAGES.find((language) => language.locale === locale);\r\n\r\n        if (!language) {\r\n            return;\r\n        }\r\n\r\n        dispatch<ISetAction>({\r\n            type: REDUX_ACTION.LANGUAGES_SET,\r\n            locale,\r\n            messages: language.messages,\r\n        });\r\n    };\r\n\r\n    return {\r\n        language,\r\n        setLanguage,\r\n    };\r\n}\r\n","export const ADDRESS = '0xf00909796e71eDEC1CA78166bd188b6522b50fEf';\r\n","export const ADDRESS = '0xd07dc4262BCDbf85190C01c996b4C06a461d2430';\r\nexport const IPFS_SOURCE = 'https://ipfs.daonomic.com';\r\n","enum MODE {\r\n    DEV = 'DEV',\r\n    TEST = 'TEST',\r\n    PROD = 'PROD',\r\n}\r\n\r\nfunction getConfig(mode: MODE) {\r\n    switch (mode) {\r\n        case MODE.DEV: {\r\n            return {\r\n                mode,\r\n                BACKEND_URL: '',\r\n            };\r\n        }\r\n        case MODE.TEST: {\r\n            return {\r\n                mode,\r\n                BACKEND_URL: '',\r\n            };\r\n        }\r\n        case MODE.PROD: {\r\n            return {\r\n                mode,\r\n                BACKEND_URL: '',\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport default getConfig(MODE.DEV);\r\n","import {IPFS_SOURCE} from 'instances/raribleContract/constants';\r\n\r\n\r\nexport function getImageUrl(imageIPFSURL: string): string | null {\r\n    const IPFSPathMatch = imageIPFSURL.match(/\\/ipfs\\/.*$/);\r\n\r\n    if (!IPFSPathMatch) {\r\n        return null;\r\n    }\r\n\r\n    const IPFSPath = IPFSPathMatch[0];\r\n\r\n    if (!IPFSPath) {\r\n        return null;\r\n    }\r\n\r\n    return `${IPFS_SOURCE}${IPFSPath}`;\r\n}\r\n","export function formatPrice(price: number): number {\r\n    return price / 10 ** 18;\r\n}\r\n","export enum INTL_DATA {\r\n    PROGRESS = 'check/progress-certificate/progress',\r\n    WAIT = 'check/progress-certificate/wait',\r\n}\r\n","export enum INTL_DATA {\r\n    PASTE_IDENTIFIER = 'landing/paste-identifier',\r\n}\r\n","import {IProps} from './types';\r\n\r\nimport {Card, Typography} from '@material-ui/core';\r\nimport React, {FC} from 'react';\r\nimport {useIntl} from 'react-intl';\r\n\r\nimport {INTL_DATA} from './intl';\r\n\r\nimport styles from './ProgressCertificate.module.scss';\r\n\r\n\r\nconst ProgressCertificate: FC<IProps> = () => {\r\n    const intl = useIntl();\r\n\r\n    return (\r\n        <div className={styles.progressCertificate}>\r\n            <Card\r\n                className={styles.verdict}\r\n                variant={'outlined'}\r\n            >\r\n                <Typography variant={'h6'}>\r\n                    {intl.formatMessage({id: INTL_DATA.PROGRESS})}\r\n                </Typography>\r\n            </Card>\r\n            <div className={styles.wait}>\r\n                <Typography variant={'h6'}>\r\n                    {intl.formatMessage({id: INTL_DATA.WAIT})}\r\n                </Typography>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProgressCertificate;\r\n","export const LANGUAGE_MENU_ID = 'language-menu';\r\n","import {Button, Menu, MenuItem} from '@material-ui/core';\r\nimport React, {FC, useState} from 'react';\r\n\r\nimport {LANGUAGES} from 'instances/languages/constants';\r\nimport {useLanguages} from 'instances/languages/hooks';\r\n\r\nimport {LANGUAGE_MENU_ID} from './constants';\r\n\r\n\r\nconst Languages: FC = () => {\r\n    const [anchor, setAnchor] = useState<HTMLButtonElement | null>(null);\r\n\r\n    const {language, setLanguage} = useLanguages();\r\n\r\n    const onClose = () => {\r\n        setAnchor(null);\r\n    };\r\n    const onChange = (locale: string) => {\r\n        setLanguage(locale);\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                color={'inherit'}\r\n                aria-controls={LANGUAGE_MENU_ID}\r\n                aria-haspopup={'true'}\r\n                onClick={(e) => setAnchor(e.currentTarget)}\r\n            >\r\n                {language.locale}\r\n            </Button>\r\n            <Menu\r\n                id={LANGUAGE_MENU_ID}\r\n                anchorEl={anchor}\r\n                keepMounted={true}\r\n                open={!!anchor}\r\n                onClose={onClose}\r\n            >\r\n                {\r\n                    LANGUAGES.map(\r\n                        (language) =>\r\n                            <MenuItem key={language.locale} onClick={() => onChange(language.locale)}>\r\n                                {language.locale}\r\n                            </MenuItem>,\r\n                    )\r\n                }\r\n            </Menu>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Languages;\r\n","import {AppBar, Button, Input, Toolbar, Typography} from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport React, {FC, useState} from 'react';\r\nimport {useIntl} from 'react-intl';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nimport Languages from './Languages';\r\n\r\nimport {INTL_DATA} from './intl';\r\n\r\nimport styles from './Header.module.scss';\r\n\r\n\r\nconst Header: FC = () => {\r\n    const [value, setValue] = useState('');\r\n\r\n    const history = useHistory();\r\n    const intl = useIntl();\r\n\r\n    const onSearch = () => {\r\n        if (!value) {\r\n            return;\r\n        }\r\n\r\n        window.location.replace(`/check/${value}`);\r\n    };\r\n\r\n    return (\r\n        <AppBar position={'sticky'}>\r\n            <Toolbar className={styles.header}>\r\n                <div>\r\n                    <Button color={'inherit'} onClick={() => history.push('/')}>\r\n                        <Typography variant={'h6'}>\r\n                            STONENT\r\n                        </Typography>\r\n                    </Button>\r\n                </div>\r\n                <div className={styles.right}>\r\n                    <div>\r\n                        <Input\r\n                            className={styles.input}\r\n                            value={value}\r\n                            onChange={(e) => setValue(e.target.value)}\r\n                            onKeyPress={(e) => e.key === 'Enter' && onSearch()}\r\n                            placeholder={intl.formatMessage({id: INTL_DATA.PASTE_IDENTIFIER})}\r\n                            endAdornment={\r\n                                <SearchIcon\r\n                                    className={styles.searchIcon}\r\n                                    onClick={onSearch}\r\n                                />\r\n                            }\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <Languages/>\r\n                    </div>\r\n                </div>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import {IProps} from './types';\r\n\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nimport styles from './Spinner.module.scss';\r\n\r\n\r\nconst Spinner = (props: IProps) => {\r\n    return (\r\n        <div className={props.isPage ? styles.spinnerPage : props.className}>\r\n            <CircularProgress size={props.size || 100}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;\r\n","export default function(date?: Date) {\r\n    const res = date || new Date();\r\n\r\n    res.setFullYear(res.getFullYear() - 1);\r\n\r\n    return res;\r\n}\r\n","export enum INTL_DATA {\r\n    DATE = 'check/certificate/date',\r\n    VERSION = 'check/certificate/version',\r\n    TRANSACTION = 'check/certificate/transaction',\r\n    ORACLE = 'check/certificate/oracle',\r\n    COPY = 'check/certificate/copy',\r\n    SCORE = 'check/certificate/score',\r\n    RECERTIFY = 'check/certificate/recertify',\r\n    PLAGIARISM = 'check/certificate/plagiarism',\r\n    ORIGINAL = 'check/certificate/original',\r\n    COPIED = 'check/certificate/copied',\r\n}\r\n","export default function(date: any): string {\r\n    date = new Date(date);\r\n\r\n    if (isNaN(date.valueOf())) {\r\n        return '';\r\n    }\r\n\r\n    const hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();\r\n    const minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();\r\n    const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();\r\n    const month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;\r\n    const year = date.getFullYear();\r\n\r\n    return `${hours}:${minutes} ${day}.${month}.${year}`;\r\n}\r\n","export enum INTL_DATA {\r\n    NOT_CERTIFIED = 'check/empty-certificate/not-certified',\r\n    PRICE = 'check/empty-certificate/price',\r\n    CERTIFY = 'check/empty-certificate/certify',\r\n}\r\n","import {IProps} from './types';\r\n\r\nimport {Button, Card, CircularProgress, Snackbar, Typography} from '@material-ui/core';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport copy from 'copy-text-to-clipboard';\r\nimport React, {FC, useState} from 'react';\r\nimport {useIntl} from 'react-intl';\r\n\r\nimport {formatDateTime} from 'tools/functions';\r\n\r\nimport {SCORE_DIVIDER} from './constants';\r\nimport {INTL_DATA} from './intl';\r\n\r\nimport styles from './Certificate.module.scss';\r\n\r\n\r\nconst Certificate: FC<IProps> = (props) => {\r\n    const [copyNotificationIsOpen, setCopyNotificationIsOpen] = useState(false);\r\n\r\n    const intl = useIntl();\r\n\r\n    const onCopy = (text: string) => {\r\n        copy(text);\r\n        setCopyNotificationIsOpen(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <div className={styles.row}>\r\n                    <div className={styles.solid}>\r\n                        <div className={styles.title}>\r\n                            <Typography>\r\n                                <b className={styles.title}>\r\n                                    {intl.formatMessage({id: INTL_DATA.DATE})}\r\n                                    :\r\n                                </b>\r\n                                {' '}\r\n                            </Typography>\r\n                        </div>\r\n                        <Typography>\r\n                            {formatDateTime(props.certificate.date)}\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.row}>\r\n                    <div className={styles.solid}>\r\n                        <div className={styles.title}>\r\n                            <Typography>\r\n                                <b className={styles.title}>\r\n                                    {intl.formatMessage({id: INTL_DATA.VERSION})}\r\n                                    :\r\n                                </b>\r\n                                {' '}\r\n                            </Typography>\r\n                        </div>\r\n                        <Typography>\r\n                            {props.certificate.version}\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={styles.row}>\r\n                    <div className={styles.solid}>\r\n                        <div className={styles.title}>\r\n                            <Typography>\r\n                                <b>\r\n                                    {intl.formatMessage({id: INTL_DATA.TRANSACTION})}\r\n                                    :\r\n                                </b>\r\n                                {' '}\r\n                            </Typography>\r\n                        </div>\r\n                        <Typography className={styles.text}>\r\n                            {props.certificate.transactionId}\r\n                        </Typography>\r\n                    </div>\r\n                    <Button\r\n                        variant={'contained'}\r\n                        color={'primary'}\r\n                        size={'small'}\r\n                        onClick={() => onCopy(props.certificate.transactionId)}\r\n                    >\r\n                        {intl.formatMessage({id: INTL_DATA.COPY})}\r\n                    </Button>\r\n                </div>\r\n                <div className={styles.row}>\r\n                    <div className={styles.solid}>\r\n                        <div className={styles.title}>\r\n                            <Typography>\r\n                                <b>\r\n                                    {intl.formatMessage({id: INTL_DATA.ORACLE})}\r\n                                    :\r\n                                </b>\r\n                                {' '}\r\n                            </Typography>\r\n                        </div>\r\n                        <Typography className={styles.text}>\r\n                            {props.certificate.oracle}\r\n                        </Typography>\r\n                    </div>\r\n                    <Button\r\n                        variant={'contained'}\r\n                        color={'primary'}\r\n                        size={'small'}\r\n                        onClick={() => onCopy(props.certificate.oracle || '')}\r\n                    >\r\n                        {intl.formatMessage({id: INTL_DATA.COPY})}\r\n                    </Button>\r\n                </div>\r\n                <div className={styles.result}>\r\n                    <Card\r\n                        className={props.certificate.score < SCORE_DIVIDER ? styles.danderVerdict : styles.succeedVerdict}\r\n                        variant={'outlined'}\r\n                    >\r\n                        <Typography variant={'h6'}>\r\n                            {intl.formatMessage({id: INTL_DATA.SCORE})}\r\n                            :\r\n                            {' '}\r\n                            {props.certificate.score}\r\n                        </Typography>\r\n                    </Card>\r\n                    <div className={styles.button}>\r\n                        <Button\r\n                            variant={'contained'}\r\n                            color={'primary'}\r\n                            size={'large'}\r\n                            disabled={props.isFetching}\r\n                            onClick={props.onRunCheck}\r\n                        >\r\n                            {\r\n                                props.isFetching ?\r\n                                    <CircularProgress size={25} color={'inherit'}/> :\r\n                                    <Typography>\r\n                                        {intl.formatMessage({id: INTL_DATA.RECERTIFY})}\r\n                                    </Typography>\r\n                            }\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.scoreBar}>\r\n                    <div className={styles.title}>\r\n                        <Typography>\r\n                            <small>\r\n                                {intl.formatMessage({id: INTL_DATA.PLAGIARISM})}\r\n                            </small>\r\n                        </Typography>\r\n                        <Typography>\r\n                            <small>\r\n                                {intl.formatMessage({id: INTL_DATA.ORIGINAL})}\r\n                            </small>\r\n                        </Typography>\r\n                    </div>\r\n                    <div className={styles.bar}/>\r\n                    <div className={styles.title}>\r\n                        <Typography>\r\n                            <small>\r\n                                0\r\n                            </small>\r\n                        </Typography>\r\n                        <Typography>\r\n                            <small>\r\n                                100\r\n                            </small>\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Snackbar\r\n                open={copyNotificationIsOpen}\r\n                autoHideDuration={3000}\r\n                onClose={() => setCopyNotificationIsOpen(false)}\r\n            >\r\n                <Alert\r\n                    variant={'filled'}\r\n                    severity={'success'}\r\n                    onClose={() => setCopyNotificationIsOpen(false)}\r\n                >\r\n                    <Typography>\r\n                        {intl.formatMessage({id: INTL_DATA.COPIED})}\r\n                        !\r\n                    </Typography>\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Certificate;\r\n","export const SCORE_DIVIDER = 50;\r\n","export enum INTL_DATA {\r\n    MARKETPLACE = 'check/marketplace',\r\n    ERROR_PAYMENT = 'check/error-payment',\r\n    ERROR_ABORTED = 'check/error-aborted',\r\n    SUCCESS_UPDATED = 'check/success-updated',\r\n}\r\n","import {IProps} from './types';\r\n\r\nimport {Button, Card, CircularProgress, Typography} from '@material-ui/core';\r\nimport React, {FC} from 'react';\r\nimport {useIntl} from 'react-intl';\r\n\r\nimport {INTL_DATA} from './intl';\r\n\r\nimport styles from './EmptyCertificate.module.scss';\r\n\r\n\r\nconst EmptyCertificate: FC<IProps> = (props) => {\r\n    const intl = useIntl();\r\n\r\n    return (\r\n        <div className={styles.emptyCertificate}>\r\n            <Card\r\n                className={styles.verdict}\r\n                variant={'outlined'}\r\n            >\r\n                <Typography variant={'h6'} color={'error'}>\r\n                    {intl.formatMessage({id: INTL_DATA.NOT_CERTIFIED})}\r\n                </Typography>\r\n            </Card>\r\n            <div className={styles.certify}>\r\n                <Typography variant={'h6'}>\r\n                    {intl.formatMessage({id: INTL_DATA.PRICE})}\r\n                    :\r\n                    {' '}\r\n                    {props.certificationPrice}\r\n                    {' '}\r\n                    USDT\r\n                </Typography>\r\n                <div className={styles.button}>\r\n                    <Button\r\n                        variant={'contained'}\r\n                        color={'primary'}\r\n                        size={'large'}\r\n                        disabled={props.isFetching}\r\n                        onClick={props.onRunCheck}\r\n                    >\r\n                        {\r\n                            props.isFetching ?\r\n                                <CircularProgress size={25} color={'inherit'}/> :\r\n                                <Typography>\r\n                                    {intl.formatMessage({id: INTL_DATA.CERTIFY})}\r\n                                </Typography>\r\n                        }\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmptyCertificate;\r\n","import {IProps} from './types';\r\n\r\nimport {Snackbar, Typography} from '@material-ui/core';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport React, {FC} from 'react';\r\n\r\n\r\nconst ErrorMessage: FC<IProps> = (props) => {\r\n    return (\r\n        <Snackbar open={props.isOpen} autoHideDuration={5000} onClose={props.onClose}>\r\n            <Alert variant={'filled'} severity={'error'} onClose={props.onClose}>\r\n                <Typography>\r\n                    {props.message}\r\n                </Typography>\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import {IProps} from './types';\r\n\r\nimport {Snackbar, Typography} from '@material-ui/core';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport React, {FC} from 'react';\r\n\r\n\r\nconst SuccessMessage: FC<IProps> = (props) => {\r\n    return (\r\n        <Snackbar open={props.isOpen} autoHideDuration={5000} onClose={props.onClose}>\r\n            <Alert variant={'filled'} severity={'success'} onClose={props.onClose}>\r\n                <Typography>\r\n                    {props.message}\r\n                </Typography>\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n};\r\n\r\nexport default SuccessMessage;\r\n","import {ICertificate} from 'instances/stonentContract/types';\r\n\r\n\r\nexport function certificateHasBeenUpdated(first: ICertificate | null, second: ICertificate | null): boolean {\r\n    if (!first) {\r\n        return true;\r\n    }\r\n    if (!second) {\r\n        return true;\r\n    }\r\n    if (first.score !== second.score) {\r\n        return true;\r\n    }\r\n    if (first.oracle !== second.oracle) {\r\n        return true;\r\n    }\r\n    if (first.version !== second.version) {\r\n        return true;\r\n    }\r\n    if (first.date !== second.date) {\r\n        return true;\r\n    }\r\n    if (first.transactionId !== second.transactionId) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n","export enum INTL_DATA {\r\n    TITLE = 'landing/title',\r\n    PASTE_IDENTIFIER = 'landing/paste-identifier',\r\n    SUPPORTED_PLATFORMS = 'landing/supported-platforms',\r\n    TEST_FIRST = 'landing/test-first',\r\n    TEST_SECOND = 'landing/test-second',\r\n    TEST_THIRD = 'landing/test-third',\r\n}\r\n","import {IProps} from './types';\r\nimport {IImageMetadata} from 'instances/raribleContract/types';\r\nimport {ICertificate} from 'instances/stonentContract/types';\r\n\r\nimport {Button, Container, Typography} from '@material-ui/core';\r\nimport React, {FC, useEffect, useState} from 'react';\r\nimport {useIntl} from 'react-intl';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nimport {useIercContract} from 'instances/iercContract/hooks';\r\nimport {getImageUrl} from 'instances/raribleContract/functions';\r\nimport {useRaribleContract} from 'instances/raribleContract/hooks';\r\nimport {useStonentContract} from 'instances/stonentContract/hooks';\r\n\r\nimport ProgressCertificate from 'components/Check/ProgressCertificate';\r\nimport Header from 'components/Helpers/Header';\r\nimport Spinner from 'components/Helpers/Spinner';\r\n\r\nimport Certificate from './Certificate';\r\nimport EmptyCertificate from './EmptyCertificate';\r\nimport ErrorMessage from './ErrorMessage';\r\nimport SuccessMessage from './SuccessMessage';\r\n\r\nimport {certificateHasBeenUpdated} from './functions';\r\nimport {INTL_DATA} from './intl';\r\n\r\nimport styles from './Check.module.scss';\r\n\r\n\r\nconst Check: FC<IProps> = (props) => {\r\n    const [imageMetadata, setImageMetadata] = useState<IImageMetadata | null>(null);\r\n    const [imageCertificate, setImageCertificate] = useState<ICertificate | null>(null);\r\n    const [isFetching, setIsFetching] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n\r\n    const {raribleContract, getImageMetadataUrl, getImageMetadata} = useRaribleContract();\r\n    const {iercContract, approveMoneyUsage, checkAccessMoneyUsage} = useIercContract();\r\n    const {stonentContract, certificationPrice, getCertificate, checkImage, getPrice, subscribeToCertificateSent, subscribeToCertified} = useStonentContract();\r\n\r\n    const history = useHistory();\r\n    const intl = useIntl();\r\n\r\n    const runCheckImage = async () => {\r\n        if (!iercContract) {\r\n            return;\r\n        }\r\n\r\n        setIsFetching(true);\r\n\r\n        const alreadyApproved = await checkAccessMoneyUsage();\r\n\r\n        if (!alreadyApproved) {\r\n            try {\r\n                await approveMoneyUsage();\r\n            } catch (error) {\r\n                setErrorMessage(intl.formatMessage({id: INTL_DATA.ERROR_PAYMENT}));\r\n                setIsFetching(false);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        try {\r\n            await checkImage(props.match.params.id);\r\n        } catch {\r\n            setErrorMessage(intl.formatMessage({id: INTL_DATA.ERROR_ABORTED}));\r\n        }\r\n\r\n        setIsFetching(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (!raribleContract) {\r\n                return;\r\n            }\r\n\r\n            const metadataUrl = await getImageMetadataUrl(props.match.params.id);\r\n\r\n            if (!metadataUrl) {\r\n                history.push('/not_found');\r\n\r\n                return;\r\n            }\r\n\r\n            const metadata = await getImageMetadata(metadataUrl);\r\n\r\n            if (!metadata) {\r\n                history.push('/not_found');\r\n\r\n                return;\r\n            }\r\n\r\n            setImageMetadata(metadata);\r\n        })();\r\n    }, [raribleContract]);\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (!imageMetadata) {\r\n                return;\r\n            }\r\n            if (!stonentContract) {\r\n                return;\r\n            }\r\n\r\n            subscribeToCertificateSent(async (data) => {\r\n                const newCertificate = await getCertificate(props.match.params.id);\r\n\r\n                if (certificateHasBeenUpdated(imageCertificate, newCertificate)) {\r\n                    setImageCertificate(newCertificate);\r\n                    setSuccessMessage(intl.formatMessage({id: INTL_DATA.SUCCESS_UPDATED}));\r\n                }\r\n            });\r\n            subscribeToCertified(async (data) => {\r\n                const newCertificate = await getCertificate(props.match.params.id);\r\n\r\n                if (certificateHasBeenUpdated(imageCertificate, newCertificate)) {\r\n                    setImageCertificate(newCertificate);\r\n                    setSuccessMessage(intl.formatMessage({id: INTL_DATA.SUCCESS_UPDATED}));\r\n                }\r\n            });\r\n\r\n            const certificate = await getCertificate(props.match.params.id);\r\n\r\n            if (!certificate) {\r\n                return;\r\n            }\r\n\r\n            setImageCertificate(certificate);\r\n        })();\r\n        (async () => {\r\n            if (!imageMetadata) {\r\n                return;\r\n            }\r\n            if (!stonentContract) {\r\n                return;\r\n            }\r\n\r\n            await getPrice();\r\n        })();\r\n    }, [imageMetadata, stonentContract]);\r\n\r\n    if (!imageMetadata || !imageCertificate) {\r\n        return (\r\n            <Spinner isPage={true}/>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Container>\r\n                <div className={styles.imagePart}>\r\n                    <div className={styles.image}>\r\n                        <img src={getImageUrl(imageMetadata.imageIPFSURL) || undefined} alt={''}/>\r\n                    </div>\r\n                    <div className={styles.info}>\r\n                        <div className={styles.top}>\r\n                            <div>\r\n                                <Typography variant={'h4'}>\r\n                                    {imageMetadata.name}\r\n                                </Typography>\r\n                            </div>\r\n                            <div>\r\n                                <Button onClick={() => window.open(imageMetadata.externalUrl, '_blank')}>\r\n                                    {intl.formatMessage({id: INTL_DATA.MARKETPLACE})}\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={styles.description}>\r\n                            <Typography>\r\n                                {imageMetadata.description}\r\n                            </Typography>\r\n                        </div>\r\n                        <div className={styles.certificate}>\r\n                            {\r\n                                !imageCertificate.id ?\r\n                                    <EmptyCertificate\r\n                                        certificationPrice={certificationPrice}\r\n                                        isFetching={isFetching}\r\n                                        onRunCheck={runCheckImage}\r\n                                    /> : !imageCertificate.date ?\r\n                                        <ProgressCertificate certificate={imageCertificate}/> :\r\n                                        <Certificate\r\n                                            certificate={imageCertificate}\r\n                                            isFetching={isFetching}\r\n                                            onRunCheck={runCheckImage}\r\n                                        />\r\n\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n            <ErrorMessage\r\n                isOpen={!!errorMessage}\r\n                message={errorMessage}\r\n                onClose={() => setErrorMessage('')}\r\n            />\r\n            <SuccessMessage\r\n                isOpen={!!successMessage}\r\n                message={successMessage}\r\n                onClose={() => setSuccessMessage('')}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Check;\r\n","import {IImageMetadata} from './types';\r\n\r\nimport config from 'config';\r\nimport {useEffect, useState} from 'react';\r\nimport Web3 from 'web3';\r\nimport {Contract} from 'web3-eth-contract';\r\n\r\nimport abi from './abi.json';\r\nimport {ADDRESS} from './constants';\r\n\r\n\r\nexport function useRaribleContract() {\r\n    const [web3, setWeb3] = useState<Web3 | null>(null);\r\n    const [raribleContract, setRaribleContract] = useState<Contract | null>(null);\r\n\r\n    const getImageMetadataUrl = async (id: string): Promise<string | null> => {\r\n        if (!raribleContract) {\r\n            return null;\r\n        }\r\n\r\n        const imageMetadataURI: string = await raribleContract.methods.uri(id).call();\r\n\r\n        return /\\/ipfs\\/.*$/.test(imageMetadataURI) ? imageMetadataURI : null;\r\n    };\r\n    const getImageMetadata = async (metadataURL: string): Promise<IImageMetadata | null> => {\r\n        const res = await fetch(metadataURL);\r\n\r\n        try {\r\n            if (res.status === 200) {\r\n                const data = await res.json();\r\n\r\n                return {\r\n                    name: data.name,\r\n                    description: data.description,\r\n                    imageIPFSURL: data.image,\r\n                    externalUrl: data.external_url,\r\n                    attributes: data.attributes,\r\n                };\r\n            } else {\r\n                return null;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            return null;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            let provider: any = null;\r\n\r\n            switch (config.mode) {\r\n                case 'DEV': {\r\n                    provider = 'wss://mainnet.infura.io/ws/v3/54f99e303d714f1899660b512775e88a';\r\n                    break;\r\n                }\r\n                case 'TEST': {\r\n                    provider = 'wss://mainnet.infura.io/ws/v3/54f99e303d714f1899660b512775e88a';\r\n                    break;\r\n                }\r\n                case 'PROD': {\r\n                    try {\r\n                        // @ts-ignore\r\n                        await window.web3.currentProvider.enable();\r\n                    } catch {\r\n                        window.location.replace('/no_provider');\r\n\r\n                        return;\r\n                    }\r\n\r\n                    // @ts-ignore\r\n                    provider = window.web3.currentProvider;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            const web3 = new Web3(provider);\r\n            // @ts-ignore\r\n            const contract = new web3.eth.Contract(abi, ADDRESS);\r\n\r\n            setWeb3(web3);\r\n            setRaribleContract(contract);\r\n        })();\r\n    }, []);\r\n\r\n    return {\r\n        raribleContract,\r\n        getImageMetadataUrl,\r\n        getImageMetadata,\r\n    };\r\n}\r\n","import {useEffect, useState} from 'react';\r\nimport Web3 from 'web3';\r\nimport {Contract} from 'web3-eth-contract';\r\n\r\nimport {ADDRESS as STONET_ADDRESS} from 'instances/stonentContract/constants';\r\n\r\nimport abi from './abi.json';\r\nimport {ADDRESS} from './constants';\r\n\r\n\r\nexport function useIercContract() {\r\n    const [web3, setWeb3] = useState<Web3 | null>(null);\r\n    const [iercContract, setIercContract] = useState<Contract | null>(null);\r\n\r\n    const approveMoneyUsage = async (): Promise<boolean> => {\r\n        if (!web3) {\r\n            return false;\r\n        }\r\n        if (!iercContract) {\r\n            return false;\r\n        }\r\n\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        if (!accounts) {\r\n            return false;\r\n        }\r\n\r\n        const defaultAccount = accounts[0];\r\n\r\n        if (!defaultAccount) {\r\n            return false;\r\n        }\r\n\r\n        return !!await iercContract.methods.approve(STONET_ADDRESS, '99000000000000000000000000000').send({from: defaultAccount});\r\n    };\r\n    const checkAccessMoneyUsage = async () => {\r\n        if (!web3) {\r\n            return false;\r\n        }\r\n        if (!iercContract) {\r\n            return false;\r\n        }\r\n\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        if (!accounts) {\r\n            return false;\r\n        }\r\n\r\n        const defaultAccount = accounts[0];\r\n\r\n        if (!defaultAccount) {\r\n            return false;\r\n        }\r\n\r\n        return !!await iercContract.methods.allowance(defaultAccount, STONET_ADDRESS).call();\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                // @ts-ignore\r\n                await window.web3.currentProvider.enable();\r\n            } catch {\r\n                window.location.replace('/no_provider');\r\n\r\n                return;\r\n            }\r\n\r\n            // @ts-ignore\r\n            const web3 = new Web3(window.web3.currentProvider);\r\n            // @ts-ignore\r\n            const contract = new web3.eth.Contract(abi, ADDRESS);\r\n\r\n            setWeb3(web3);\r\n            setIercContract(contract);\r\n        })();\r\n    }, []);\r\n\r\n    return {\r\n        iercContract,\r\n        approveMoneyUsage,\r\n        checkAccessMoneyUsage,\r\n    };\r\n}\r\n","export const ADDRESS = '0xc6D9B7913e9eE33C58513341e9e20Ea3e5Dfd8fD';\r\n","import {ICertificate, IEventCertified, IEventSent} from './types';\r\n\r\nimport {useEffect, useState} from 'react';\r\nimport Web3 from 'web3';\r\nimport {Contract} from 'web3-eth-contract';\r\n\r\nimport {formatPrice} from 'instances/stonentContract/functions';\r\n\r\nimport abi from './abi.json';\r\nimport {ADDRESS} from './constants';\r\n\r\n\r\nexport function useStonentContract() {\r\n    const [web3, setWeb3] = useState<Web3 | null>(null);\r\n    const [stonentContract, setStonentContract] = useState<Contract | null>(null);\r\n    const [certificationPrice, setCertificationPrice] = useState<number | null>(null);\r\n\r\n    const getCertificate = async (imageId: string): Promise<ICertificate | null> => {\r\n        if (!stonentContract) {\r\n            return null;\r\n        }\r\n\r\n        const transactionId = await stonentContract.methods.lastCertification(imageId).call();\r\n\r\n        if (!transactionId) {\r\n            return null;\r\n        }\r\n\r\n        const certificate = await stonentContract.methods.certificates(transactionId).call();\r\n\r\n        if (!certificate) {\r\n            return null;\r\n        }\r\n\r\n        const parsedDate  = parseInt(certificate.Date, 10);\r\n\r\n        return {\r\n            id: certificate.ID,\r\n            score: parseInt(certificate.Score, 10),\r\n            oracle: certificate.Oracle === '0x0000000000000000000000000000000000000000' ? null : certificate.Oracle,\r\n            version: certificate.Version,\r\n            date: parsedDate ? new Date(parsedDate * 1000) : null,\r\n            transactionId,\r\n        };\r\n    };\r\n    const checkImage = async (imageId: string) => {\r\n        if (!web3) {\r\n            return;\r\n        }\r\n        if (!stonentContract) {\r\n            return;\r\n        }\r\n\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        if (!accounts) {\r\n            return false;\r\n        }\r\n\r\n        const defaultAccount = accounts[0];\r\n\r\n        if (!defaultAccount) {\r\n            return false;\r\n        }\r\n\r\n        await stonentContract.methods.check(imageId).send({from: defaultAccount});\r\n    };\r\n    const getPrice = async () => {\r\n        if (!stonentContract) {\r\n            return;\r\n        }\r\n\r\n        const price = await stonentContract.methods.price().call();\r\n        const parsedPrice = parseInt(price, 10);\r\n\r\n        if (isNaN(parsedPrice)) {\r\n            return null;\r\n        }\r\n\r\n        const formattedPrice = formatPrice(parsedPrice);\r\n\r\n        setCertificationPrice(formattedPrice);\r\n    };\r\n    const subscribeToCertificateSent = (cb: (data: IEventSent) => void) => {\r\n        if (!stonentContract) {\r\n            return;\r\n        }\r\n\r\n        stonentContract.events.RequestSended({fromBlock: 'latest'}, (error: any, data: IEventSent) => {\r\n            cb(data);\r\n        });\r\n    };\r\n    const subscribeToCertified = (cb: (data: IEventCertified) => void) => {\r\n        if (!stonentContract) {\r\n            return;\r\n        }\r\n\r\n        stonentContract.events.RequestCertified({fromBlock: 'latest'}, (error: any, data: IEventCertified) => {\r\n            cb(data);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                // @ts-ignore\r\n                await window.web3.currentProvider.enable();\r\n            } catch {\r\n                window.location.replace('/no_provider');\r\n\r\n                return;\r\n            }\r\n\r\n            // @ts-ignore\r\n            const web3 = new Web3(window.web3.currentProvider);\r\n            // @ts-ignore\r\n            const contract = new web3.eth.Contract(abi, ADDRESS);\r\n\r\n            setWeb3(web3);\r\n            setStonentContract(contract);\r\n        })();\r\n    }, []);\r\n\r\n    return {\r\n        stonentContract,\r\n        certificationPrice,\r\n        getCertificate,\r\n        checkImage,\r\n        getPrice,\r\n        subscribeToCertificateSent,\r\n        subscribeToCertified,\r\n    };\r\n}\r\n","export enum INTL_DATA {\r\n    NO_PROVIDER = 'no-provider/no-provider',\r\n    MAIN_PAGE = 'not-found/main-page',\r\n}\r\n","import {Container, TextField, Typography} from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport React, {FC, useState} from 'react';\r\nimport {useIntl} from 'react-intl';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nimport Header from 'components/Helpers/Header';\r\n\r\nimport {INTL_DATA} from './intl';\r\n\r\nimport styles from './Landing.module.scss';\r\n\r\n\r\nconst Landing: FC = () => {\r\n    const [searchValue, setSearchValue] = useState('');\r\n\r\n    const history = useHistory();\r\n    const intl = useIntl();\r\n\r\n    const onSearch = async () => {\r\n        if (!searchValue) {\r\n            return;\r\n        }\r\n\r\n        // @ts-ignore\r\n        await window.web3.currentProvider.enable();\r\n\r\n        history.push(`/check/${searchValue}`);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Container className={styles.landing}>\r\n                <div className={styles.content}>\r\n                    <div className={styles.title}>\r\n                        <Typography variant={'h3'}>\r\n                            {intl.formatMessage({id: INTL_DATA.TITLE})}\r\n                        </Typography>\r\n                    </div>\r\n                    <div\r\n                        className={styles.search}\r\n                        onKeyPress={(e) => e.key === 'Enter' && onSearch()}\r\n                    >\r\n                        <TextField\r\n                            className={styles.searchInput}\r\n                            label={intl.formatMessage({id: INTL_DATA.PASTE_IDENTIFIER})}\r\n                            value={searchValue}\r\n                            onChange={(e) => setSearchValue(e.target.value)}\r\n                            InputProps={{\r\n                                endAdornment:\r\n                                    <SearchIcon\r\n                                        className={styles.searchIcon}\r\n                                        onClick={onSearch}\r\n                                    />,\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className={styles.supportedCollections}>\r\n                        <Typography>\r\n                            {intl.formatMessage({id: INTL_DATA.SUPPORTED_PLATFORMS})}\r\n                            :\r\n                            {' '}\r\n                            <span\r\n                                className={styles.link}\r\n                                onClick={() => window.open('https://etherscan.io/address/0xd07dc4262bcdbf85190c01c996b4c06a461d2430')}\r\n                            >\r\n                                Rarible Collection\r\n                            </span>\r\n                        </Typography>\r\n                    </div>\r\n                    <div className={styles.testAlert}>\r\n                        <div>\r\n                            <Typography>\r\n                                <b>\r\n                                    {intl.formatMessage({id: INTL_DATA.TEST_FIRST})}\r\n                                </b>\r\n                            </Typography>\r\n                        </div>\r\n                        <div>\r\n                            <Typography>\r\n                                <b>\r\n                                    {intl.formatMessage({id: INTL_DATA.TEST_SECOND})}\r\n                                </b>\r\n                            </Typography>\r\n                        </div>\r\n                        <div>\r\n                            <Typography>\r\n                                <b>\r\n                                    {intl.formatMessage({id: INTL_DATA.TEST_THIRD})}\r\n                                </b>\r\n                            </Typography>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Landing;\r\n","export enum INTL_DATA {\r\n    NOT_FOUND = 'not-found/not-found',\r\n    MAIN_PAGE = 'not-found/main-page',\r\n}\r\n","import {Button, Container, Typography} from '@material-ui/core';\r\nimport React, {FC} from 'react';\r\nimport {useIntl} from 'react-intl';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nimport Header from 'components/Helpers/Header';\r\n\r\nimport {INTL_DATA} from './intl';\r\n\r\nimport styles from './NoProvider.module.scss';\r\n\r\n\r\nconst NoProvider: FC = () => {\r\n    const history = useHistory();\r\n    const intl = useIntl();\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Container className={styles.container}>\r\n                <div className={styles.noProvider}>\r\n                    <Typography variant={'h4'}>\r\n                        {intl.formatMessage({id: INTL_DATA.NO_PROVIDER})}\r\n                    </Typography>\r\n                </div>\r\n                <div className={styles.mainPage}>\r\n                    <Button\r\n                        variant={'contained'}\r\n                        color={'primary'}\r\n                        onClick={() => history.push('/')}\r\n                        size={'large'}\r\n                    >\r\n                        {intl.formatMessage({id: INTL_DATA.MAIN_PAGE})}\r\n                    </Button>\r\n                </div>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NoProvider;\r\n","import {Button, Container, Typography} from '@material-ui/core';\r\nimport React, {FC} from 'react';\r\nimport {useIntl} from 'react-intl';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nimport Header from 'components/Helpers/Header';\r\n\r\nimport {INTL_DATA} from './intl';\r\n\r\nimport styles from './NotFound.module.scss';\r\n\r\n\r\nconst NotFound: FC = () => {\r\n    const history = useHistory();\r\n    const intl = useIntl();\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Container className={styles.container}>\r\n                <div className={styles.notFound}>\r\n                    <Typography variant={'h4'}>\r\n                        {intl.formatMessage({id: INTL_DATA.NOT_FOUND})}\r\n                    </Typography>\r\n                </div>\r\n                <div className={styles.mainPage}>\r\n                    <Button\r\n                        variant={'contained'}\r\n                        color={'primary'}\r\n                        onClick={() => history.push('/')}\r\n                        size={'large'}\r\n                    >\r\n                        {intl.formatMessage({id: INTL_DATA.MAIN_PAGE})}\r\n                    </Button>\r\n                </div>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NotFound;\r\n","import {MuiThemeProvider} from '@material-ui/core';\nimport React, {FC} from 'react';\nimport {IntlProvider} from 'react-intl';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\nimport {theme} from 'helpers/materialUI';\n\nimport {useLanguages} from 'instances/languages/hooks';\n\nimport Check from 'components/Check';\nimport Landing from 'components/Landing';\nimport NoProvider from 'components/NoProvider';\nimport NotFound from 'components/NotFound';\n\n\nconst App: FC = () => {\n    const {language} = useLanguages();\n\n    return (\n        <MuiThemeProvider theme={theme}>\n            <IntlProvider locale={language.locale} messages={language.messages}>\n                <Router>\n                    <Switch>\n                        <Route exact={true} path={'/'} component={Landing}/>\n                        <Route exact={true} path={'/check/:id'} component={Check}/>\n                        <Route exact={true} path={'/no_provider'} component={NoProvider}/>\n                        <Route exact={true} path={'*'} component={NotFound}/>\n                    </Switch>\n                </Router>\n            </IntlProvider>\n        </MuiThemeProvider>\n    );\n};\n\nexport default App;\n","import {IReduxAction, IReduxState} from 'instances/types';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport {createStore} from 'tools/redux';\n\nimport {reducer} from 'instances/redux';\n\nimport App from './App';\n\nimport './index.scss';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={createStore<IReduxState, IReduxAction>(reducer)}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n","import {createBrowserHistory} from 'history';\r\nimport {routerMiddleware} from 'react-router-redux';\r\nimport {Action, applyMiddleware, createStore, Reducer} from 'redux';\r\n\r\n\r\nexport default function<IReduxState, IReduxAction extends Action>(reducer: Reducer<IReduxState, IReduxAction>) {\r\n    const history = createBrowserHistory();\r\n    const middleware = [\r\n        routerMiddleware(history),\r\n    ];\r\n\r\n    return createStore<IReduxState, IReduxAction, null, null>(reducer);\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imagePart\":\"Check_imagePart__2NSN1\",\"image\":\"Check_image__2pQub\",\"info\":\"Check_info__1qMVU\",\"top\":\"Check_top__1K5ea\",\"description\":\"Check_description__1gs9M\",\"certificate\":\"Check_certificate__alvjP\"};"],"sourceRoot":""}